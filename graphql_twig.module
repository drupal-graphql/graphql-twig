<?php

/**
 * @file
 * GraphQL Twig hook implementations.
 */

use Drupal\graphql_twig\QueryAssembler;

define('GRAPHQL_TWIG_QUERY_REGEX', '/\{#graphql-query\n(?<query>.*)\n#\}\n/s');
define('GRAPHQL_TWIG_FRAGMENT_REGEX', '/\{#graphql-fragment\n(?<fragment>.*)\n#\}\n/s');

/**
 * Implements hook_theme().
 */
function graphql_twig_theme($existing, $type, $theme, $path) {

  $themeRegistry = [];
  /** @var \Drupal\Core\Theme\ThemeManagerInterface $themeManager */
  $themeManager = \Drupal::service('theme.manager');

  $activeTheme = $themeManager->getActiveTheme();
  $paths = [$activeTheme->getName() => $activeTheme->getPath()];

  $paths += array_map(function (\Drupal\Core\Theme\ActiveTheme $theme) {
    return $theme->getPath();
  }, $activeTheme->getBaseThemes());

  foreach (array_reverse($paths) as $path) {
    foreach (file_scan_directory($path . '/templates', '/.*\.html\.twig/') as $file) {
      $template = substr($file->filename,0, strlen('.html.twig') * -1);

      // Do not add template suggestions.
      if (strstr($template, '--')) {
        continue;
      }

      $hook = str_replace('-', '_', $template);

      if (array_key_exists($hook, $themeRegistry)) {
        continue;
      }

      $content = file_get_contents($file->uri);

      if (preg_match(GRAPHQL_TWIG_QUERY_REGEX, $content) || preg_match(GRAPHQL_TWIG_FRAGMENT_REGEX, $content)) {
        $themeRegistry[$hook] = [
          'template' => $template,
          'path' => dirname($file->uri),
          'type' => 'base_theme_engine',
          'theme path' => $path,
          'render element' => 'elements',
          'preprocess functions' => ['graphql_twig_query'],
        ];
      }

    }
  }
  return $themeRegistry;
}

/**
 * Implements hook_theme_registry_alter().
 */
function graphql_twig_theme_registry_alter(&$themeRegistry) {
  $queryRegex = '/\{#graphql-query\n(?<query>.*)\n#\}\n/s';
  $fragmentRegex = '/\{#graphql-fragment\n(?<fragment>.*)\n#\}\n/s';


  $assembler = new QueryAssembler();
  $queries = [];

  foreach ($themeRegistry as $hook => $info) {
    if (!array_key_exists('template', $info)) {
      continue;
    }

    $template = $info['theme path'] . '/templates/' . $info['template'] . '.html.twig';

    if (file_exists($template)) {
      $content = file_get_contents($template);
      $matches = [];

      preg_match($queryRegex, $content, $matches);
      if (array_key_exists('query', $matches)) {
        $source = $assembler->parse($matches['query']);
        $queries[$hook] = $matches['query'];
        $themeRegistry[$hook]['variables'] = [];

        foreach ($source['variables'] as $variable) {
          /** @var \Youshido\GraphQL\Parser\Ast\ArgumentValue\Variable $variable */
          $themeRegistry[$hook]['variables'][$variable->getName()] = null;
        }

        $themeRegistry[$hook]['preprocess functions'] = ['graphql_twig_query'];
      }

      preg_match($fragmentRegex, $content, $matches);
      if (array_key_exists('fragment', $matches)) {
        $source = $assembler->parse($matches['fragment']);
        foreach ($source['fragments'] as $fragment) {
          /** @var \Youshido\GraphQL\Parser\Ast\Fragment $fragment */
          foreach ($fragment->getFields() as $field) {
            /** @var \Youshido\GraphQL\Parser\Ast\Field */
            $themeRegistry[$hook]['variables'][$field->getAlias() ?: $field->getName()] = NULL;
          }
        }
        $assembler->addFragment($hook, $matches['fragment']);
      }
    }
  }

  foreach ($queries as $hook => $query) {
    $themeRegistry[$hook]['graphql_query'] = $assembler->assemble($query);
  }
}

/**
 * Implements hook_preprocess().
 */
function graphql_twig_query(&$variables, $hook, $info) {
  if (array_key_exists('graphql_query', $info)) {
    /** @var \Drupal\graphql\QueryProcessor $processor */
    $processor = \Drupal::service('graphql.query_processor');
    $result = $processor->processQuery($info['graphql_query'], $variables);
    $variables = $result->getData();
  }
}
